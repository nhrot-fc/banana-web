---
import { Image } from 'astro:assets';

interface Call {
  name: string;
  waveform?: string;
  spectrogram?: string;
  audio?: string | any;
  annotations?: string;
  description: string;
}

interface Species {
  code: string;
  english: string;
  spanish: string;
  scientific: string;
  image: string | any;
  calls: Call[];
  acousticCharacteristics: string;
  reference?: string;
}

const { species } = Astro.props as { species: Species };

// Check if image is an imported asset or a path string
const isImageImported = typeof species.image === 'object';

// Generate unique spectrogram ID for this species
const uniqueID = Math.random().toString(36).substring(2, 9);

// Format reference URL as APA citation
let formattedReference = '';
if (species.reference) {
  const referenceUrl = species.reference.trim();
  const currentYear = new Date().getFullYear();
  const domain = new URL(referenceUrl).hostname.replace('www.', '');
  formattedReference = `${species.scientific} [Photograph]. (${currentYear}). Retrieved from ${domain}`;
}
---

<div class="species-showcase bg-gray-900/40 rounded-lg p-6 mb-8 relative overflow-hidden border border-gray-800/50" data-species-code={species.code} id={`showcase-${species.code}-${uniqueID}`}>
  <div class="flex flex-col md:flex-row gap-8">
    <!-- Species image and basic info -->
    <div class="md:w-1/3">
      {isImageImported ? (
        <Image src={species.image} alt={species.english} class="w-full rounded-lg shadow-lg object-cover max-h-80 border border-gray-700/40" />
      ) : (
        <img src={species.image} alt={species.english} class="w-full rounded-lg shadow-lg object-cover max-h-80 border border-gray-700/40" />
      )}
      <div class="species-info mt-4">
        <div class="flex items-center gap-2 mb-1">
          <div class="w-3 h-3 bg-green-500 rounded-full"></div>
          <h3 class="text-2xl font-bold text-green-400">{species.english}</h3>
        </div>
        <p class="text-green-200/70 italic mb-2">{species.scientific}</p>
        <p class="text-sm text-green-100/80 mb-1">
          <span class="text-green-400/80">Local name:</span> {species.spanish}
        </p>
        <p class="text-sm text-green-100/80">
          <span class="text-green-400/80">Code:</span> {species.code}
        </p>
        <div class="hidden species-data" data-code={species.code} data-uid={uniqueID}></div>
      </div>
      
      <!-- Image reference citation in APA format -->
      {species.reference && (
        <div class="image-reference mt-3">
          <details class="text-xs">
            <summary class="text-green-400/60 cursor-pointer hover:text-green-400/80">Image citation</summary>
            <p class="text-green-200/60 mt-1 pl-2 border-l-2 border-green-900/40 font-mono leading-tight">
              {formattedReference}
              <a href={species.reference} target="_blank" rel="noopener noreferrer" class="block mt-1 text-blue-400/80 hover:text-blue-400 truncate">
                {species.reference}
              </a>
            </p>
          </details>
        </div>
      )}
    </div>

    <!-- Acoustic information and visualizations -->
    <div class="md:w-2/3">
      <h4 class="text-xl font-medium text-green-300 mb-2">Acoustic Profile</h4>
      <p class="text-green-100/90 mb-4">{species.acousticCharacteristics}</p>

      {species.calls.map((call, index) => {
        const callUniqueId = `${species.code}-${index}-${uniqueID}`;
        return (
          <div class="call-block bg-gray-900/60 p-4 rounded-lg mb-4 border border-navy-800/30" data-call-id={callUniqueId}>
            <div class="flex justify-between items-center mb-3">
              <h5 class="text-lg font-medium text-green-300">{call.name}</h5>
              <div class="flex">
                <button 
                  id={`play-btn-${callUniqueId}`} 
                  data-species={species.code}
                  data-index={index}
                  data-uid={uniqueID}
                  class="play-btn bg-green-700 hover:bg-green-800 text-white px-3 py-1 rounded-full text-sm flex items-center gap-1"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  Play
                </button>
                
                <!-- Add a hidden audio element for each call -->
                <audio 
                  id={`audio-${callUniqueId}`} 
                  class="hidden" 
                  preload="metadata"
                >
                  <source src={call.audio || `/assets/${species.code.toLowerCase()}/${species.code.toLowerCase()}_call${index + 1}.wav`} type="audio/wav" />
                  Your browser does not support the audio element.
                </audio>
              </div>
            </div>
            
            <p class="text-green-200/70 text-sm mb-3">{call.description}</p>
            
            <!-- Waveform visualization -->
            <div class="mb-4">
              <div class="flex items-center justify-between mb-1">
                <span class="text-xs text-green-500">Waveform</span>
              </div>
              <div 
                id={`waveform-${callUniqueId}`} 
                data-species={species.code}
                data-index={index}
                data-uid={uniqueID}
                class="waveform-container w-full h-16 bg-gray-950/80 rounded"
              ></div>
            </div>
            
            <!-- Spectrogram visualization -->
            <div class="mb-3">
              <div class="flex items-center justify-between mb-1">
                <span class="text-xs text-green-500">Spectrogram</span>
              </div>
              <div 
                id={`spectrogram-${callUniqueId}`} 
                data-species={species.code}
                data-index={index}
                data-uid={uniqueID}
                class="spectrogram-container w-full h-24 bg-gray-950/80 rounded"
              ></div>
            </div>

            <!-- Annotations section -->
            <div class="annotations mt-3">
              <div class="text-xs text-green-400/80 mb-1">Annotations</div>
              <div class="text-sm text-green-100/80 bg-gray-950/80 p-2 rounded max-h-20 overflow-y-auto">
                <p class="text-xs font-mono">Detection time: 07:42:13</p>
                <p class="text-xs font-mono">Frequency range: 1.2kHz - 3.5kHz</p>
                <p class="text-xs font-mono">Duration: 1.7 seconds</p>
                <p class="text-xs font-mono">Confidence score: 98.2%</p>
              </div>
            </div>
          </div>
        );
      })}

      <!-- Detection stats like in Arbimon -->
      <div class="detection-stats bg-blue-950/30 p-3 rounded-lg flex items-center justify-between border border-blue-900/20">
        <span class="text-green-400 font-medium">Detected {Math.floor(Math.random() * 150) + 50} times in {Math.floor(Math.random() * 5) + 1} sites</span>
        <div class="flex gap-2">
          <span class="bg-gray-900/70 px-2 py-1 rounded text-xs text-green-200/70">Automatic</span>
          <span class="bg-blue-900/40 px-2 py-1 rounded text-xs text-green-400">Verified</span>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Global script for WaveSurfer -->
<script type="module">
  // Import WaveSurfer once, globally
  //import WaveSurfer from 'https://unpkg.com/wavesurfer.js@7/dist/wavesurfer.esm.js';

  import WaveSurfer from '../../node_modules/wavesurfer.js/dist/wavesurfer.esm.js';
  
  // Store WaveSurfer instances to prevent duplicates
  window.wavesurferInstances = window.wavesurferInstances || new Map();
  window.isInitialized = window.isInitialized || false;
  
  // Initialize only once
  if (!window.isInitialized) {
    window.isInitialized = true;
    
    // Initialize event listeners on play buttons
    document.addEventListener('DOMContentLoaded', () => {
      initializeAudioPlayers();
      renderAllSpectrograms();
    });
  }
  
  function initializeAudioPlayers() {
    const playButtons = document.querySelectorAll('.play-btn');
    
    playButtons.forEach(btn => {
      // Check if this button was already initialized
      if (!btn.getAttribute('data-initialized')) {
        btn.setAttribute('data-initialized', 'true');
        btn.addEventListener('click', handlePlayButtonClick);
      }
    });
  }
  
  function renderAllSpectrograms() {
    const spectrogramContainers = document.querySelectorAll('.spectrogram-container');
    spectrogramContainers.forEach(container => {
      if (!container.getAttribute('data-rendered')) {
        generateSpectrogram(container);
        container.setAttribute('data-rendered', 'true');
      }
    });
  }
  
  // Handle play button click
  function handlePlayButtonClick(event) {
    const btn = event.currentTarget;
    const speciesCode = btn.getAttribute('data-species');
    const index = btn.getAttribute('data-index');
    const uid = btn.getAttribute('data-uid');
    
    if (!speciesCode || !index || !uid) {
      console.error('Missing data attributes:', { speciesCode, index, uid });
      return;
    }
    
    const callUniqueId = `${speciesCode}-${index}-${uid}`;
    const audioEl = document.getElementById(`audio-${callUniqueId}`);
    
    if (!audioEl) {
      console.error(`Audio element not found: audio-${callUniqueId}`);
      return;
    }
    
    // Create or retrieve waveform
    let wavesurfer = window.wavesurferInstances.get(callUniqueId);
    
    if (!wavesurfer) {
      // First click - initialize wavesurfer (this is after user interaction so AudioContext is allowed)
      const waveformEl = document.getElementById(`waveform-${callUniqueId}`);
      
      if (!waveformEl) {
        console.error(`Waveform element not found: waveform-${callUniqueId}`);
        return;
      }
      
      // Clear any previous content
      waveformEl.innerHTML = '';
      
      wavesurfer = WaveSurfer.create({
        container: waveformEl,
        waveColor: '#84cc16',
        progressColor: '#22c55e',
        cursorColor: '#ffffff',
        barWidth: 2,
        barRadius: 3,
        cursorWidth: 1,
        height: 64,
        barGap: 2,
        responsive: true,
        normalize: true,
      });
      
      // Store instance
      window.wavesurferInstances.set(callUniqueId, wavesurfer);
      
      try {
        // Load audio
        const audioSrc = audioEl.querySelector('source').src;
        wavesurfer.load(audioSrc);
        
        // Add error handler
        wavesurfer.on('error', (err) => {
          console.error(`Error loading audio for ${callUniqueId}:`, err);
          waveformEl.innerHTML = `<div class="flex items-center justify-center h-full text-red-400 text-xs">Error loading audio</div>`;
        });
        
        // Add ready handler to play after loading
        wavesurfer.on('ready', () => {
          togglePlayback(audioEl, wavesurfer, btn);
        });
        
        // Handle end event
        wavesurfer.on('finish', () => {
          updateButtonToStopped(btn);
          audioEl.currentTime = 0;
        });
      } catch (err) {
        console.error('Error setting up WaveSurfer:', err);
      }
    } else {
      // WaveSurfer already exists, toggle playback directly
      togglePlayback(audioEl, wavesurfer, btn);
    }
  }
  
  // Toggle audio playback
  function togglePlayback(audioEl, wavesurfer, btn) {
    // Stop all other playing audio
    stopAllOtherAudio(btn);
    
    if (audioEl.paused) {
      // Start playback
      try {
        // Play both the native audio element and wavesurfer
        const playPromise = audioEl.play();
        
        if (playPromise !== undefined) {
          playPromise.then(() => {
            wavesurfer.play();
            updateButtonToPlaying(btn);
          }).catch(err => {
            console.error('Error playing audio:', err);
            // Still update UI even if there's an error
            wavesurfer.play();
            updateButtonToPlaying(btn);
          });
        } else {
          // Older browsers might not return a promise
          wavesurfer.play();
          updateButtonToPlaying(btn);
        }
      } catch (err) {
        console.error('Error in toggle playback (play):', err);
      }
    } else {
      // Pause playback
      try {
        audioEl.pause();
        wavesurfer.pause();
        updateButtonToStopped(btn);
      } catch (err) {
        console.error('Error in toggle playback (pause):', err);
      }
    }
  }
  
  // Stop all other playing audio except the current one
  function stopAllOtherAudio(currentBtn) {
    const allButtons = document.querySelectorAll('.play-btn');
    
    allButtons.forEach(btn => {
      if (btn !== currentBtn && btn.innerHTML.includes('Pause')) {
        const speciesCode = btn.getAttribute('data-species');
        const index = btn.getAttribute('data-index');
        const uid = btn.getAttribute('data-uid');
        
        if (speciesCode && index && uid) {
          const callUniqueId = `${speciesCode}-${index}-${uid}`;
          const audioEl = document.getElementById(`audio-${callUniqueId}`);
          const wavesurfer = window.wavesurferInstances.get(callUniqueId);
          
          if (audioEl && !audioEl.paused) {
            audioEl.pause();
            audioEl.currentTime = 0;
          }
          
          if (wavesurfer && wavesurfer.isPlaying()) {
            wavesurfer.pause();
          }
          
          updateButtonToStopped(btn);
        }
      }
    });
  }
  
  // Update button to playing state
  function updateButtonToPlaying(btn) {
    btn.innerHTML = `
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
      Pause
    `;
  }
  
  // Update button to stopped state
  function updateButtonToStopped(btn) {
    btn.innerHTML = `
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
      Play
    `;
  }
  
  // Generate a spectrogram
  function generateSpectrogram(container) {
    // Clear container first
    container.innerHTML = '';
    
    const canvas = document.createElement('canvas');
    canvas.width = container.clientWidth;
    canvas.height = container.clientHeight;
    container.appendChild(canvas);
    
    const ctx = canvas.getContext('2d');
    if (!ctx) return;
    
    // Fill background
    ctx.fillStyle = 'rgba(10, 15, 30, 0.95)';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    
    // Draw grid
    drawGrid(ctx, canvas.width, canvas.height);
    
    // Draw call patterns
    drawCallPatterns(ctx, canvas);
  }
  
  // Draw grid on spectrogram
  function drawGrid(ctx, width, height) {
    ctx.strokeStyle = 'rgba(255, 255, 255, 0.05)';
    ctx.lineWidth = 0.5;
    
    // Horizontal grid lines
    for (let y = 0; y < height; y += height / 10) {
      ctx.beginPath();
      ctx.moveTo(0, y);
      ctx.lineTo(width, y);
      ctx.stroke();
    }
    
    // Vertical grid lines
    for (let x = 0; x < width; x += width / 20) {
      ctx.beginPath();
      ctx.moveTo(x, 0);
      ctx.lineTo(x, height);
      ctx.stroke();
    }
  }
  
  // Draw call patterns on the spectrogram
  function drawCallPatterns(ctx, canvas) {
    const width = canvas.width;
    const height = canvas.height;
    
    // Colors for different intensities
    const colors = [
      'rgba(52, 211, 153, 1)',    // bright green
      'rgba(16, 185, 129, 0.9)',  // medium green
      'rgba(6, 148, 162, 0.8)',   // teal
      'rgba(2, 132, 199, 0.7)',   // blue
      'rgba(55, 48, 163, 0.5)',   // indigo
      'rgba(139, 92, 246, 0.3)'   // purple
    ];
    
    // Create call bursts
    const numCalls = 2 + Math.floor(Math.random() * 3);
    const callSpacing = width / (numCalls + 1);
    
    for (let i = 0; i < numCalls; i++) {
      const startX = callSpacing * (i + 0.5) + Math.random() * (callSpacing * 0.3);
      const callLength = width * (0.1 + Math.random() * 0.15);
      
      // Draw primary frequency
      const centerY = height * (0.3 + Math.random() * 0.4);
      const waviness = 8 + Math.random() * 7;
      const amplitude = height * 0.02;
      
      // Draw the primary call with rounded edges
      const gradient = ctx.createLinearGradient(startX, 0, startX + callLength, 0);
      gradient.addColorStop(0, 'rgba(52, 211, 153, 0.3)');
      gradient.addColorStop(0.5, 'rgba(52, 211, 153, 0.9)');
      gradient.addColorStop(1, 'rgba(52, 211, 153, 0.3)');
      
      // Draw smoother wave
      ctx.beginPath();
      ctx.moveTo(startX, centerY);
      
      for (let x = 0; x <= callLength; x += 1) {
        const yPos = centerY + Math.sin(x / waviness) * amplitude;
        ctx.lineTo(startX + x, yPos);
      }
      
      ctx.lineWidth = 3;
      ctx.strokeStyle = colors[0];
      ctx.stroke();
      
      // Draw glow effect
      ctx.beginPath();
      ctx.moveTo(startX, centerY);
      
      for (let x = 0; x <= callLength; x += 1) {
        const yPos = centerY + Math.sin(x / waviness) * amplitude;
        ctx.lineTo(startX + x, yPos);
      }
      
      ctx.lineWidth = 6;
      ctx.strokeStyle = 'rgba(52, 211, 153, 0.3)';
      ctx.stroke();
      
      // Draw harmonics
      for (let h = 1; h <= 2; h++) {
        const harmonicY = centerY - (height * 0.15 * h);
        
        ctx.beginPath();
        ctx.moveTo(startX, harmonicY);
        
        for (let x = 0; x <= callLength; x += 1) {
          const yPos = harmonicY + Math.sin(x / waviness) * (amplitude * 0.7);
          ctx.lineTo(startX + x, yPos);
        }
        
        ctx.lineWidth = 2;
        ctx.strokeStyle = colors[h + 1];
        ctx.stroke();
      }
    }
  }
</script>

<style>
  .species-showcase {
    min-height: 400px;
  }
</style> 