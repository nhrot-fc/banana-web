---
import '../styles/global.css';

interface Props {
	title?: string;
}

const { title = "Análisis Bio-Acústico de Primates | Amazonía Peruana" } = Astro.props;
---

<!doctype html>
<html lang="es">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
	</head>
	<body class="w-full h-screen bg-[#0c1e0f] text-white font-inter overflow-hidden">
		<div class="flex flex-col h-screen">
			<!-- Progress bar -->
			<div id="slideProgress" class="slide-progress" style="width: 0%;"></div>
			
			<header class="absolute top-0 z-50 bg-[#090c0a]/90 backdrop-blur-sm w-full">
				<nav class="container mx-auto px-4 py-3 flex items-center justify-between">
					<a href="/" class="text-green-500 font-bold text-xl">BioPrimateAI</a>
					<div class="flex space-x-6 text-sm">
						<a href="#slide-1" class="hover:text-green-400 transition-colors">Inicio</a>
						<a href="#slide-2" class="hover:text-green-400 transition-colors">Generalidades</a>
						<a href="#slide-5" class="hover:text-green-400 transition-colors">Marco Referencial</a>
						<a href="#slide-8" class="hover:text-green-400 transition-colors">Estado del Arte</a>
						<a href="#slide-11" class="hover:text-green-400 transition-colors">Referencias</a>
						<a href="#slide-12" class="hover:text-green-400 transition-colors">Anexos</a>
					</div>
				</nav>
			</header>
			
			<main class="h-full overflow-y-auto snap-y snap-mandatory scroll-smooth">
				<slot />
			</main>
			
			<!-- Navigation controls -->
			<div class="fixed bottom-8 right-8 flex space-x-4 z-50">
				<button id="prevSlide" class="bg-green-700 hover:bg-green-800 p-3 rounded-full shadow-lg">
					<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
					</svg>
				</button>
				<button id="nextSlide" class="bg-green-700 hover:bg-green-800 p-3 rounded-full shadow-lg">
					<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
					</svg>
				</button>
			</div>
			
			<!-- Slide indicator -->
			<div class="fixed bottom-8 left-1/2 transform -translate-x-1/2 z-50 bg-[#090c0a]/80 backdrop-blur-sm rounded-full px-4 py-1">
				<span id="currentSlideNumber" class="font-medium text-green-400">1</span>
				<span class="text-gray-400">/</span>
				<span id="totalSlides" class="text-gray-400">12</span>
			</div>
		</div>

		<script>
			// Simple navigation between slides
			const slides = document.querySelectorAll('.slide');
			const prevBtn = document.getElementById('prevSlide');
			const nextBtn = document.getElementById('nextSlide');
			const progressBar = document.getElementById('slideProgress');
			const currentSlideNumber = document.getElementById('currentSlideNumber');
			const totalSlides = document.getElementById('totalSlides');
			
			// Set total slides count
			if (totalSlides) {
				totalSlides.textContent = slides.length.toString();
			}

			// Initialize slide index based on URL hash or default to 0
			let currentIndex = 0;
			const hash = window.location.hash;
			if (hash) {
				const slideId = hash.substring(1);
				const slideElement = document.getElementById(slideId);
				if (slideElement) {
					const slideIndex = Array.from(slides).indexOf(slideElement);
					if (slideIndex !== -1) {
						currentIndex = slideIndex;
						updateProgressBar(currentIndex);
					}
				}
			}
			
			// Update progress bar and slide number
			function updateProgressBar(index: number) {
				if (progressBar) {
					const progress = ((index + 1) / slides.length) * 100;
					progressBar.style.width = `${progress}%`;
				}
				
				if (currentSlideNumber) {
					currentSlideNumber.textContent = (index + 1).toString();
				}
			}
			
			// Initial update
			updateProgressBar(currentIndex);

			// Navigate to previous slide
			const goToPrevSlide = () => {
				if (currentIndex > 0) {
					currentIndex--;
					const slideId = slides[currentIndex].getAttribute('id') || '';
					window.location.hash = slideId;
					slides[currentIndex].scrollIntoView({ behavior: 'smooth' });
					updateProgressBar(currentIndex);
				}
			};

			// Navigate to next slide
			const goToNextSlide = () => {
				if (currentIndex < slides.length - 1) {
					currentIndex++;
					const slideId = slides[currentIndex].getAttribute('id') || '';
					window.location.hash = slideId;
					slides[currentIndex].scrollIntoView({ behavior: 'smooth' });
					updateProgressBar(currentIndex);
				}
			};

			// Button navigation
			if (prevBtn) {
				prevBtn.addEventListener('click', goToPrevSlide);
			}

			if (nextBtn) {
				nextBtn.addEventListener('click', goToNextSlide);
			}

			// Keyboard navigation
			document.addEventListener('keydown', (e) => {
				if (e.key === 'ArrowLeft') {
					goToPrevSlide();
				} else if (e.key === 'ArrowRight') {
					goToNextSlide();
				}
			});

			// Update current index when scrolling
			const observer = new IntersectionObserver((entries) => {
				entries.forEach(entry => {
					if (entry.isIntersecting) {
						const slideIndex = Array.from(slides).indexOf(entry.target);
						if (slideIndex !== -1) {
							currentIndex = slideIndex;
							updateProgressBar(currentIndex);
						}
					}
				});
			}, { threshold: 0.7 });

			slides.forEach(slide => {
				observer.observe(slide);
			});
		</script>
	</body>
</html>

